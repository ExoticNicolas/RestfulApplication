package com.SpringBootREST.mapper;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.SpringBootREST.data.vo.BookVO;
import com.SpringBootREST.model.Book;

public class BookDozerConvertTest {
	
	private MockPerson inputObject;
	
	@BeforeEach
	public void setUp() {
		inputObject = new MockPerson();
	}
	
	@Test
	public void convertVOToEntity() {
		Book book = DozerMapper.parseObject(inputObject.mockVO(), Book.class);
		assertEquals(Long.valueOf(0),book.getId());
		assertEquals("Test Name0",book.getName());
		assertEquals("Test Author0", book.getAuthor());
	}

	@Test
	public void convertEntityToVO() {
		BookVO vo = DozerMapper.parseObject(inputObject.mockEntity(), BookVO.class);
		assertEquals(Long.valueOf(0), vo.getId());
		assertEquals("Test Name0", vo.getName());
		assertEquals("Test Author0", vo.getAuthor());
	}
	
	@Test
	public void convertListEntityToListVO() {
		List<BookVO> listVO = DozerMapper.parseListObject(inputObject.mockEntityList(), BookVO.class);
		
		BookVO vo0 = listVO.get(0);
		
		assertEquals(Long.valueOf(0), vo0.getId());
		assertEquals("Test Name0", vo0.getName());
		assertEquals("Test Author0", vo0.getAuthor());
		
		BookVO vo2 = listVO.get(2);
		
		assertEquals(Long.valueOf(2), vo2.getId());
		assertEquals("Test Name2", vo2.getName());
		assertEquals("Test Author2", vo2.getAuthor());
		
		BookVO vo4 = listVO.get(4);
		
		assertEquals(Long.valueOf(4), vo4.getId());
		assertEquals("Test Name4", vo4.getName());
		assertEquals("Test Author4", vo4.getAuthor());
	}
	
	@Test
	public void convertListVOToListEntity() {
		
		List<Book> list = DozerMapper.parseListObject(inputObject.mockVoList(), Book.class);
		
		Book vo0 = list.get(0);
		
		assertEquals(Long.valueOf(0), vo0.getId());
		assertEquals("Test Name0", vo0.getName());
		assertEquals("Test Author0", vo0.getAuthor());
		
		Book vo2 = list.get(2);
		
		assertEquals(Long.valueOf(2), vo2.getId());
		assertEquals("Test Name2", vo2.getName());
		assertEquals("Test Author2", vo2.getAuthor());
		
		Book vo4 = list.get(4);
		
		assertEquals(Long.valueOf(4), vo4.getId());
		assertEquals("Test Name4", vo4.getName());
		assertEquals("Test Author4", vo4.getAuthor());
	}
}
