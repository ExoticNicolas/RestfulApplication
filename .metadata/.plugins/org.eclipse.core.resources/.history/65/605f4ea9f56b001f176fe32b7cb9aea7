package com.SpringBootREST.controllers;


import java.net.URI;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.SpringBootREST.data.vo.PersonVO;
import com.SpringBootREST.service.PersonService;

@RestController
@RequestMapping(value = "/api/person/v1")
public class PersonController {

	@Autowired
	private PersonService personService;
	
	@GetMapping(value = "/{id}", produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE })
	public ResponseEntity<PersonVO> findById(@PathVariable Long id)	{
		PersonVO vo = personService.findById(id);
		return ResponseEntity.ok().body(vo);
	}
	
	@GetMapping
	public ResponseEntity<List<PersonVO>> findAll(){
		List<PersonVO> vos = personService.findAll();
		return ResponseEntity.ok().body(vos);
	}
	
	@PostMapping
	public ResponseEntity<PersonVO> create(@RequestBody PersonVO personVO){
		PersonVO vo = personService.create(personVO);
		URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(vo.getId()).toUri();
		return ResponseEntity.created(uri).body(vo);
	}
	
	@PutMapping
	public ResponseEntity<PersonVO> update(@RequestBody PersonVO personVO){
		PersonVO vo = personService.update(personVO);
		return ResponseEntity.ok().body(vo);
	}
	
	@DeleteMapping(value = "/{id}")
	public ResponseEntity<?> delete(@PathVariable Long id){
		return ResponseEntity.noContent().build();
	}
}
